1. Given two sorted arrays, A and B. A has enough unused space at the end to fit all of B. Write a method to merge A and B.
2. Write a method to sort two arrays of strings such that all anagrams are next to each other.
3. Given a sorted array of N integers that has been rotated an unknown number of times, write code to find an element in the array. You may assume that the array was origninal sorted in increasing order. EXAMPLE Input: find 5 in {15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14} Output: 8
4. Imagine you have a 20GB file with one string per line. Explain how you would sort the file.
5. Given a sorted array of sting, interspersed with empty strings, write a method to find the location of a given string. EXAMPLE Input: find "ball" in {"att", "", "", "", "ball", "", "", "car", "", "", "dad", "", ""} Output: 4
6. Given an M x N matrix in which each row and column is sorted in increasing order write a method to find a given element.
7. A circus has designed a tower routine in which people stand atop one another's shoulders. For practical and aesthetic reasons each person must be shorter and lighter than the person below him/her. Given the heights and weights of each person in the circus, write a method to compute the largest possible height of such a tower. EXAMPLE Input: (65, 100), (70, 150), (56, 90), (75, 190), (60, 95), (68, 110) Output: 6, ((56, 90), (60, 95), (65, 100), (68, 110), (70, 150), (75, 190)
8. Imagine you are reading a stream of integers. Periodically, you wish to look up the rank of a number X (the count of elements <= X). Implement the data structures and algorithms to support this operation. That is, implement track(int x) and rankOf(int x) (which returns the count of element <= X, excluding X itself). EXAMPLE Stream: 5, 1, 4, 4, 5, 9, 7, 13, 3. rankOf(1) == 0, rankOf(3) == 1, rankOf(4) == 3.  
